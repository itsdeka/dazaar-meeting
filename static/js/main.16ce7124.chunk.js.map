{"version":3,"sources":["../node_modules/sodium-javascript sync","../node_modules/dazaar sync","Video.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Video","url","localVideo","React","createRef","useEffect","current","src","ref","autoPlay","hypercore","require","ram","m","market","hyperswarm","App","createHash","update","digest","useState","className","onClick","navigator","mediaDevices","getUserMedia","audio","video","width","height","then","mediaStream","document","querySelector","quality","media","cb","opts","videoBitsPerSecond","audioBitsPerSecond","mimeType","feed","filename","sparse","seller","sell","validate","remoteKey","swarm","console","log","wsProxy","webrtcBootstrap","simplePeer","config","iceServers","setInterval","mediaRecorder","MediaRecorder","ondataavailable","event","a","data","arrayBuffer","uint8View","Uint8Array","append","length","Date","toISOString","start","setTimeout","stop","on","socket","info","ready","err","key","toString","broadcast","srcObject","onloadedmetadata","play","catch","name","message","buyer","buy","window","prompt","stream","createReadStream","snapshot","tail","live","batch","timeout","index","chunk","replay","ms","MediaSource","URL","createObjectURL","addEventListener","addSourceBuffer","appendBuffer","style","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.16ce7124.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 286;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 384;","import React, { useEffect, useState } from \"react\";\n\nconst Video = ({ url }) => {\n  const localVideo = React.createRef();\n\n  // localVideo.current is null on first render\n  // localVideo.current.srcObject = stream;\n\n  useEffect(() => {\n    // Let's update the srcObject only after the ref has been set\n    // and then every time the stream prop updates\n    if (localVideo.current) localVideo.current.src = url;\n  }, [url, localVideo]);\n\n  return (\n      <video ref={localVideo} autoPlay />\n  );\n};\n\nexport default Video;","import \"./App.css\";\nimport Video from \"./Video\";\nimport React, {useState} from \"react\";\nvar recorder = require(\"media-recorder-stream\");\nvar hypercore = require(\"hypercore\");\nvar ram = require(\"random-access-memory\");\nconst market = require(\"dazaar\");\nconst m = market(\"./tmp\");\nconst hyperswarm = require(\"dazaar/swarm\");\nconst crypto = require(\"crypto\");\nconst topic = crypto\n  .createHash(\"sha256\")\n  .update(\"my-hyperswarm-topic\")\n  .digest();\n\n\nconst App = () => {\n  const broadcast = (quality, media, cb) => {\n    // create bitrate options\n    var video = quality === 3 ? 800000 : quality === 2 ? 500000 : 200000;\n    var audio = quality === 3 ? 128000 : quality === 2 ? 64000 : 32000;\n\n    // create MediaRecorder\n    var opts = {\n      videoBitsPerSecond: video,\n      audioBitsPerSecond: audio,\n      mimeType: \"video/webm;codecs=vp8,opus\",\n    };\n\n    var feed = hypercore(\n      function (filename) {\n        return ram(filename);\n      },\n      null,\n      { sparse: true }\n    );\n\n    const seller = m.sell(feed, {\n      validate(remoteKey, cb) {\n        cb(null);\n      },\n    });\n\n    const swarm = hyperswarm(seller, (e) => console.log(e), {\n      wsProxy: [\"wss://hyperswarm.mauve.moe\"],\n      webrtcBootstrap: [\n        \"wss://geut-webrtc-signal-v3.herokuapp.com\",\n        \"wss://signal.dat-web.eu\",\n        \"wss://geut-webrtc-signal-v3.glitch.me\",\n      ],\n      simplePeer: {\n        // The configuration passed to the RTCPeerConnection constructor,for more details see\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection#RTCConfiguration_dictionary\n        config: {\n          // List of STUN and TURN setvers to connect\n          // Without the connection is limited to local peers\n          iceServers: require(\"./ice-servers.json\"),\n        },\n      },\n    });\n\n    setInterval(() => {\n      let mediaRecorder = new MediaRecorder(media, opts);\n\n      mediaRecorder.ondataavailable = async (event) => {\n        var arrayBuffer = await event.data.arrayBuffer();\n        var uint8View = new Uint8Array(arrayBuffer);\n        feed.append(uint8View);\n        console.log(feed.length)\n        console.log(new Date().toISOString());\n      }\n\n      mediaRecorder.start();\n      setTimeout(event => {\n        mediaRecorder.stop();\n      }, 1000);\n\n    }, [1000]);\n\n\n    swarm.on(\"connection\", (socket, info) => {\n      console.log(\"new connection!\", info);\n    });\n\n    seller.ready(function (err) {\n      console.log(seller.key.toString(\"hex\"));\n    });\n  };\n\n  const streamCamVideo = () => {\n    var constraints = { audio: true, video: { width: 1280, height: 720 } };\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(function (mediaStream) {\n        var video = document.querySelector(\"video\");\n        broadcast(3, mediaStream, function (mediaRecorder, hash) {\n          window.recorder = mediaRecorder;\n          console.log(hash);\n        });\n        video.srcObject = mediaStream;\n        video.onloadedmetadata = function (e) {\n          video.play();\n        };\n      })\n      .catch(function (err) {\n        console.log(err.name + \": \" + err.message);\n      }); // always check for errors at the end.\n  };\n\n  const watch = () => {\n    const buyer = m.buy(window.prompt(\"hey\"), { sparse: true });\n\n    const swarm = hyperswarm(buyer, (e) => console.log(e), {\n      wsProxy: [\"wss://hyperswarm.mauve.moe\"],\n      webrtcBootstrap: [\n        \"wss://geut-webrtc-signal-v3.herokuapp.com\",\n        \"wss://signal.dat-web.eu\",\n        \"wss://geut-webrtc-signal-v3.glitch.me\",\n      ],\n      simplePeer: {\n        // The configuration passed to the RTCPeerConnection constructor,for more details see\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection#RTCConfiguration_dictionary\n        config: {\n          // List of STUN and TURN setvers to connect\n          // Without the connection is limited to local peers\n          iceServers: require(\"./ice-servers.json\"),\n        },\n      },\n    });\n\n    swarm.on(\"connection\", (socket, info) => {\n      console.log(\"new connection!\", info);\n      socket.on(\"stream\", (stream) => {\n        console.log(stream);\n      });\n    });\n\n    console.log(buyer);\n    buyer.on(\"ready\", function () {\n      console.log(\"ready\");\n    });\n    buyer.on(\"feed\", async function () {\n      await buyer.feed.update(function () {\n        let stream = buyer.feed.createReadStream({\n          snapshot: false,\n          tail: true,\n          live: true,\n          batch: 1,\n          timeout: 0,\n          start: buyer.feed.length\n        });\n\n        console.log(stream.index);\n\n        stream.on(\"data\", chunk => {\n          console.log(stream);\n          const replay = document.querySelector(\"#replay\");\n          var ms = new MediaSource();\n          replay.src = window.URL.createObjectURL(ms);\n          ms.addEventListener(\n              \"sourceopen\",\n              async () => {\n                let source = ms.addSourceBuffer(\"video/webm;codecs=vp8,opus\");\n                source.appendBuffer(chunk);\n                console.log(new Date().toISOString());\n              },\n              false\n          );\n        });\n      });\n    });\n\n    buyer.on(\"validate\", function () {\n      console.log(\"remote validated us\");\n    });\n  };\n\n  const [url, setUrl] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <button onClick={streamCamVideo}>Stream</button>\n      <button onClick={watch}>Watch</button>\n      <video id={\"video\"} style={{ width: 600, height: 600 }} autoPlay={true} />\n      <video\n        id={\"replay\"}\n        style={{ width: 600, height: 600 }}\n        autoPlay={true}\n      />\n      {url && <Video url={url}/>}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}