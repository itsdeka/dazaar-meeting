{"version":3,"sources":["../node_modules/sodium-javascript sync","../node_modules/dazaar sync","Video.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Video","url","localVideo","React","createRef","useEffect","current","src","ref","autoPlay","hypercore","require","ram","m","market","hyperswarm","App","createHash","update","digest","streamCamVideo","navigator","mediaDevices","getUserMedia","audio","video","width","height","then","mediaStream","document","querySelector","quality","media","cb","opts","videoBitsPerSecond","audioBitsPerSecond","mimeType","feed","filename","sparse","seller","sell","validate","remoteKey","on","onBuyerValid","stream","swarm","console","log","wsProxy","webrtcBootstrap","simplePeer","config","iceServers","setInterval","mediaRecorder","MediaRecorder","ondataavailable","event","a","data","arrayBuffer","uint8View","Uint8Array","append","length","Date","toISOString","start","setTimeout","stop","socket","info","ready","err","key","toString","broadcast","srcObject","onloadedmetadata","play","catch","name","message","useState","className","onClick","window","prompt","buyer","buy","createReadStream","snapshot","tail","live","batch","chunk","replay","ms","MediaSource","URL","createObjectURL","addEventListener","addSourceBuffer","appendBuffer","index","watch","style","muted","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2486f748.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 272;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 371;","import React, { useEffect, useState } from \"react\";\n\nconst Video = ({ url }) => {\n  const localVideo = React.createRef();\n\n  // localVideo.current is null on first render\n  // localVideo.current.srcObject = stream;\n\n  useEffect(() => {\n    // Let's update the srcObject only after the ref has been set\n    // and then every time the stream prop updates\n    if (localVideo.current) localVideo.current.src = url;\n  }, [url, localVideo]);\n\n  return (\n      <video ref={localVideo} autoPlay />\n  );\n};\n\nexport default Video;","import \"./App.css\";\nimport Video from \"./Video\";\nimport React, {useState, useEffect} from \"react\";\nvar hypercore = require(\"hypercore\");\nvar ram = require(\"random-access-memory\");\nconst market = require(\"dazaar\");\nconst m = market(\"./tmp\");\nconst hyperswarm = require(\"dazaar/swarm\");\nconst crypto = require(\"crypto\");\nconst topic = crypto\n  .createHash(\"sha256\")\n  .update(\"my-hyperswarm-topic\")\n  .digest();\n\n\nconst App = () => {\n  const broadcast = (quality, media, cb) => {\n    // create bitrate options\n    var video = quality === 3 ? 800000 : quality === 2 ? 500000 : 200000;\n    var audio = quality === 3 ? 128000 : quality === 2 ? 64000 : 32000;\n\n    // create MediaRecorder\n    var opts = {\n      videoBitsPerSecond: video,\n      audioBitsPerSecond: audio,\n      mimeType: \"video/webm;codecs=vp8,opus\",\n    };\n\n    var feed = hypercore(\n      function (filename) {\n        return ram(filename);\n      },\n      null,\n      { sparse: true }\n    );\n\n    const seller = m.sell(feed, {\n      validate(remoteKey, cb) {\n        cb(null);\n      },\n    });\n\n    seller.on('ready', () => seller.on('peer-add', onBuyerValid));\n\n    const onBuyerValid = (stream) => {\n      // watch(stream.remotePublicKey);\n    };\n\n    const swarm = hyperswarm(seller, (e) => console.log(e), {\n      wsProxy: [\"wss://hc.virale.io/proxy\"],\n      webrtcBootstrap: [\n        \"wss://hc.virale.io/signal\"\n      ],\n      simplePeer: {\n        // The configuration passed to the RTCPeerConnection constructor,for more details see\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection#RTCConfiguration_dictionary\n        config: {\n          // List of STUN and TURN setvers to connect\n          // Without the connection is limited to local peers\n          iceServers: require(\"./ice-servers.json\"),\n        },\n      },\n    });\n\n    setInterval(() => {\n      let mediaRecorder = new MediaRecorder(media, opts);\n\n      mediaRecorder.ondataavailable = async (event) => {\n        var arrayBuffer = await event.data.arrayBuffer();\n        var uint8View = new Uint8Array(arrayBuffer);\n        feed.append(uint8View);\n        console.log('Seller ' + feed.length)\n        console.log('Seller ' + new Date().toISOString());\n      }\n\n      mediaRecorder.start();\n      setTimeout(event => {\n        mediaRecorder.stop();\n      }, 1000);\n\n    }, [1000]);\n\n    swarm.on(\"connection\", (socket, info) => {\n      console.log(\"new connection!\", info);\n    });\n\n    seller.ready(function (err) {\n      console.log(seller.key.toString(\"hex\"));\n    });\n  };\n\n  const streamCamVideo = () => {\n    var constraints = { audio: true, video: { width: 1920, height: 1080 } };\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(function (mediaStream) {\n        var video = document.querySelector(\"video\");\n        broadcast(3, mediaStream, function (mediaRecorder, hash) {\n          window.recorder = mediaRecorder;\n          console.log(hash);\n        });\n        video.srcObject = mediaStream;\n        video.onloadedmetadata = function (e) {\n          video.play();\n        };\n      })\n      .catch(function (err) {\n        console.log(err.name + \": \" + err.message);\n      }); // always check for errors at the end.\n  };\n\n  const watch = (key) => {\n    if (!key) key = window.prompt('hey');\n    const buyer = m.buy(key, { sparse: true });\n\n    const swarm = hyperswarm(buyer, (e) => console.log(e), {\n      wsProxy: [\"wss://hc.virale.io/proxy\"],\n      webrtcBootstrap: [\n        \"wss://hc.virale.io/signal\"\n      ],\n      simplePeer: {\n        // The configuration passed to the RTCPeerConnection constructor,for more details see\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection#RTCConfiguration_dictionary\n        config: {\n          // List of STUN and TURN setvers to connect\n          // Without the connection is limited to local peers\n          iceServers: require(\"./ice-servers.json\"),\n        },\n      },\n    });\n\n    swarm.on(\"connection\", (socket, info) => {\n      console.log(\"new connection!\", info);\n      socket.on(\"stream\", (stream) => {\n        console.log(stream);\n      });\n    });\n\n    console.log(buyer);\n    buyer.on(\"ready\", function () {\n      console.log(\"ready\");\n    });\n    buyer.on(\"feed\", async function () {\n      await buyer.feed.update(function () {\n        let stream = buyer.feed.createReadStream({\n          snapshot: false,\n          tail: true,\n          live: true,\n          batch: 100\n        });\n\n        stream.on(\"data\", chunk => {\n            const replay = document.querySelector(\"#replay\");\n            var ms = new MediaSource();\n            replay.src = window.URL.createObjectURL(ms);\n            ms.addEventListener(\n                \"sourceopen\",\n                async () => {\n                  let source = ms.addSourceBuffer(\"video/webm;codecs=vp8,opus\");\n                  source.appendBuffer(chunk);\n                  console.log('Buyer ' + stream.index)\n                  console.log('Buyer ' + new Date().toISOString());\n                },\n                false\n            );\n        });\n      });\n    });\n\n    buyer.on(\"validate\", function () {\n      console.log(\"remote validated us\");\n    });\n  };\n\n  const [url, setUrl] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <button onClick={() => streamCamVideo()}>Stream</button>\n      <button onClick={() => watch(null)}>Watch</button>\n      <video id={\"video\"} style={{ width: 600, height: 600 }} muted={true} autoPlay={true} />\n      <video\n        id={\"replay\"}\n        style={{ width: 600, height: 600 }}\n        autoPlay={true}\n      />\n      {url && <Video url={url}/>}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}